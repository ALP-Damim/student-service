# 학생 출석 통계 서비스 API 테스트
# 애플리케이션 실행 후 콘솔에서 실제 생성된 ID를 확인하세요

## 1. 강좌 관리 API

### 모든 강좌 조회
GET http://localhost:8080/api/classes

### 강좌 조회 (최대 10개)
GET http://localhost:8080/api/classes?limit=10

### 학기 오름차순 정렬
GET http://localhost:8080/api/classes?semesterOrder=asc

### 학기 내림차순 정렬 + 5개 제한
GET http://localhost:8080/api/classes?semesterOrder=desc&limit=5

### 요일 비트마스크(목/금=24)로 필터링
GET http://localhost:8080/api/classes?day=24

### 평일(월~금=31) + 학기 내림차순 + 10개 제한
GET http://localhost:8080/api/classes?day=31&semesterOrder=desc&limit=10

### 시작 ID 기준으로 조회 (포함)
GET http://localhost:8080/api/classes?startId=45&limit=10

### 특정 교사의 강좌만 조회
GET http://localhost:8080/api/classes?teacherId=1

### 특정 교사의 강좌 조회 (최대 5개)
GET http://localhost:8080/api/classes?teacherId=1&limit=5

### 특정 교사의 강좌 + 학기 내림차순 정렬
GET http://localhost:8080/api/classes?teacherId=1&semesterOrder=desc

### 특정 교사의 강좌 + 요일 필터링 (월화수=7)
GET http://localhost:8080/api/classes?teacherId=1&day=7

### 특정 교사의 강좌 + 복합 조건 (학기 내림차순 + 요일 필터 + 제한)
GET http://localhost:8080/api/classes?teacherId=1&semesterOrder=desc&day=31&limit=10

### 강좌 등록
POST http://localhost:8080/api/classes
Content-Type: application/json

{
  "teacherId": 1,
  "teacherName": "김교수",
  "className": "자바 프로그래밍",
  "semester": "2024-2",
  "schoolYear": "2024",
  "subject": "자바프로그래밍",
  "zoomUrl": "https://zoom.us/j/123456789",
  "heldDay": 7,
  "startsAt": "10:00:00",
  "endsAt": "12:00:00",
  "capacity": 30
}

### 강좌 등록 (월화수 수업)
POST http://localhost:8080/api/classes
Content-Type: application/json

{
  "teacherId": 2,
  "teacherName": "이교수",
  "className": "데이터베이스 설계",
  "semester": "2024-2",
  "schoolYear": "2024",
  "subject": "데이터베이스",
  "zoomUrl": "https://zoom.us/j/987654321",
  "heldDay": 7,
  "startsAt": "14:00:00",
  "endsAt": "16:00:00",
  "capacity": 25
}

### 강좌 등록 (목금 수업)
POST http://localhost:8080/api/classes
Content-Type: application/json

{
  "teacherId": 3,
  "teacherName": "박교수",
  "className": "웹 개발 실습",
  "semester": "2024-2",
  "schoolYear": "2024",
  "subject": "웹개발",
  "zoomUrl": "https://zoom.us/j/555666777",
  "heldDay": 24,
  "startsAt": "09:00:00",
  "endsAt": "11:00:00",
  "capacity": 20
}

### 여러 강좌 한번에 조회
POST http://localhost:8080/api/classes/batch
Content-Type: application/json

[1, 2, 3]

### 강좌 등록 (새로운 필드 포함 - 자동 세션 생성 테스트)
POST http://localhost:8080/api/classes
Content-Type: application/json

{
  "teacherId": 4,
  "teacherName": "최교수",
  "className": "스프링부트 실습",
  "semester": "2024-2",
  "schoolYear": "2024",
  "subject": "스프링부트",
  "zoomUrl": "https://zoom.us/j/111222333",
  "heldDay": 16,
  "startsAt": "13:00:00",
  "endsAt": "15:00:00",
  "capacity": 15
}

### 강좌 등록 (월화수 수업 - 자동 세션 생성 테스트)
POST http://localhost:8080/api/classes
Content-Type: application/json

{
  "teacherId": 5,
  "teacherName": "정교수",
  "className": "알고리즘",
  "semester": "2024-2",
  "schoolYear": "2024",
  "subject": "알고리즘",
  "zoomUrl": "https://zoom.us/j/444555666",
  "heldDay": 7,
  "startsAt": "16:00:00",
  "endsAt": "18:00:00",
  "capacity": 20
}

### 강좌 등록 (금요일 수업 - 자동 세션 생성 테스트)
POST http://localhost:8080/api/classes
Content-Type: application/json

{
  "teacherId": 6,
  "teacherName": "한교수",
  "className": "데이터 구조",
  "semester": "2024-2",
  "schoolYear": "2024",
  "subject": "데이터구조",
  "zoomUrl": "https://zoom.us/j/777888999",
  "heldDay": 16,
  "startsAt": "09:00:00",
  "endsAt": "11:00:00",
  "capacity": 25
}

## 2. 출석 관리 API

### 클래스별 출석 통계 조회
GET http://localhost:8080/api/attendance/class/1/1

### 세션별 출석 조회
GET http://localhost:8080/api/attendance/session/1/1

### 출석 기록 생성
POST http://localhost:8080/api/attendance
Content-Type: application/json

{
  "sessionId": 1,
  "studentId": 2,
  "status": "PRESENT",
  "note": "정상 출석"
}

### 출석 기록 생성 (지각)
POST http://localhost:8080/api/attendance
Content-Type: application/json

{
  "sessionId": 1,
  "studentId": 3,
  "status": "LATE",
  "note": "10분 지각"
}

### 출석 기록 생성 (결석)
POST http://localhost:8080/api/attendance
Content-Type: application/json

{
  "sessionId": 2,
  "studentId": 2,
  "status": "ABSENT",
  "note": "개인 사정으로 결석"
}

### 출석 기록 생성 (사유 결석)
POST http://localhost:8080/api/attendance
Content-Type: application/json

{
  "sessionId": 2,
  "studentId": 3,
  "status": "EXCUSED",
  "note": "병가로 인한 사유 결석"
}

### 출석 기록 생성 (중복 시도 - 에러)
POST http://localhost:8080/api/attendance
Content-Type: application/json

{
  "sessionId": 1,
  "studentId": 2,
  "status": "PRESENT",
  "note": "중복 출석 기록"
}

### 출석 기록 생성 (존재하지 않는 학생 - 에러)
POST http://localhost:8080/api/attendance
Content-Type: application/json

{
  "sessionId": 1,
  "studentId": 999,
  "status": "PRESENT",
  "note": "존재하지 않는 학생"
}

### 출석 기록 생성 (존재하지 않는 세션 - 에러)
POST http://localhost:8080/api/attendance
Content-Type: application/json

{
  "sessionId": 999,
  "studentId": 2,
  "status": "PRESENT",
  "note": "존재하지 않는 세션"
}

## 3. 사용자 관리 API

### 사용자 정보 조회
GET http://localhost:8080/api/users/1

### 사용자 정보 조회 (학생)
GET http://localhost:8080/api/users/2

### 사용자 정보 조회 (교사)
GET http://localhost:8080/api/users/3

## 4. 사용자 프로필 API

### 사용자 프로필 조회
GET http://localhost:8080/api/user-profiles/1

### 사용자 프로필 조회 (학생)
GET http://localhost:8080/api/user-profiles/2

### 사용자 프로필 조회 (교사)
GET http://localhost:8080/api/user-profiles/3

### 존재하지 않는 사용자 프로필 조회
GET http://localhost:8080/api/user-profiles/999

### 사용자 프로필 수정
PUT http://localhost:8080/api/user-profiles/1
Content-Type: application/json

{
  "name": "김교수님",
  "desiredCourse": "스프링부트",
  "desiredJob": "백엔드 개발자",
  "birthDate": "1985-03-15",
  "school": "서울대학교",
  "phone": "010-1234-5678"
}

### 사용자 프로필 부분 수정 (이름만 변경)
PUT http://localhost:8080/api/user-profiles/2
Content-Type: application/json

{
  "name": "이학생님"
}

### 사용자 프로필 부분 수정 (전화번호만 변경)
PUT http://localhost:8080/api/user-profiles/3
Content-Type: application/json

{
  "phone": "010-9876-5432"
}

### 사용자 프로필 수정 (잘못된 전화번호 형식)
PUT http://localhost:8080/api/user-profiles/1
Content-Type: application/json

{
  "phone": "010-123-4567"
}

### 존재하지 않는 사용자 프로필 수정
PUT http://localhost:8080/api/user-profiles/999
Content-Type: application/json

{
  "name": "존재하지 않는 사용자"
}

## 5. 수강 신청 API

### 수강 신청 목록 조회 (전체)
GET http://localhost:8080/api/enrollments

### 수강 신청 목록 조회 (학생별)
GET http://localhost:8080/api/enrollments?studentId=2

### 수강 신청 목록 조회 (강좌별)
GET http://localhost:8080/api/enrollments?classId=1

### 수강 신청 목록 조회 (상태별)
GET http://localhost:8080/api/enrollments?status=ENROLLED

### 수강 신청 목록 조회 (복합 조건)
GET http://localhost:8080/api/enrollments?studentId=2&status=ENROLLED

### 강좌 신청
POST http://localhost:8080/api/enrollments
Content-Type: application/json

{
  "studentId": 2,
  "classId": 1
}

### 강좌 신청 (다른 학생)
POST http://localhost:8080/api/enrollments
Content-Type: application/json

{
  "studentId": 3,
  "classId": 2
}

### 강좌 신청 (같은 학생, 다른 강좌)
POST http://localhost:8080/api/enrollments
Content-Type: application/json

{
  "studentId": 2,
  "classId": 3
}

### 강좌 신청 (존재하지 않는 학생)
POST http://localhost:8080/api/enrollments
Content-Type: application/json

{
  "studentId": 999,
  "classId": 1
}

### 강좌 신청 (존재하지 않는 강좌)
POST http://localhost:8080/api/enrollments
Content-Type: application/json

{
  "studentId": 2,
  "classId": 999
}

### 강좌 신청 (교사가 신청 시도)
POST http://localhost:8080/api/enrollments
Content-Type: application/json

{
  "studentId": 1,
  "classId": 1
}

### 강좌 신청 (중복 신청)
POST http://localhost:8080/api/enrollments
Content-Type: application/json

{
  "studentId": 2,
  "classId": 1
}

## 6. 세션 관리 API

### 강좌별 세션 목록 조회
GET http://localhost:8080/api/sessions/classes/1

### 새로 생성된 강좌의 세션 목록 조회 (위에서 생성한 강좌 ID 사용)
GET http://localhost:8080/api/sessions/classes/4

### 월화수 수업 세션 목록 조회
GET http://localhost:8080/api/sessions/classes/5

### 금요일 수업 세션 목록 조회
GET http://localhost:8080/api/sessions/classes/6